@model Travel.Areas.Admin.Models.PhotoGalleryViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>PhotoGalleryHeader</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.GalleryHeader.GalleryID)

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.GalleryHeader.InternalUse, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.GalleryHeader.InternalUse)
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.GalleryHeader.GalleryCommonName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.GalleryHeader.GalleryCommonName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.GalleryHeader.GalleryCommonName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                @*@foreach (var item in Model.GalleryNameList)*@
                @for (int i = 0; i < Model.GalleryNameList.Count(); i++)
                {
                    @Html.HiddenFor(model => Model.GalleryNameList[i].LangID)
                    @Html.HiddenFor(model => Model.GalleryNameList[i].GalleryID)

                    <div class="form-group">
                        @Html.Label(Model.GalleryNameList[i].LanguageName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => Model.GalleryNameList[i].GalleryName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => Model.GalleryNameList[i].GalleryName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                @*<div id="locGalleryNameGrid"></div>*@

                @*<div ng-app="localNames" ng-controller="localNameController">
                        <div ng-repeat="x in nameList">
                            <label class="control-label col-md-2">{{x.LanguageName}}</label>
                            <div class="col-md-10">
                                <input ng-model="x.GalleryName" data-id="{{x.LangID}}" class="form-control" />
                            </div>
                        </div>
                    </div>*@

                @*@foreach (var item in ViewBag.Localized as IEnumerable<Travel.Models.PhotoGalleryLocalizedHeader>)
                    {
                        <div class="form-group">
                            @item.Language.Name
                            <div class="col-md-10">
                                @Html.EditorFor(model => item.GalleryName, new { htmlAttributes = new { @class = "form-control", @data_id=item.ID, data_gid = item.GalleryID, @data_lid = item.LangID} })
                                @Html.ValidationMessageFor(model => item.GalleryName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }*@
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/angular.min.js"></script>
    <script>
        ////////var app = angular.module('localNames', []);
        ////////app.controller('localNameController', function($scope) {
        ////////    $scope.nameList =  @@Html.Raw(Json.Encode(Model.GalleryNameList));
        ////////});

        ////////$(function () {
        ////////    $("#locGalleryNameGrid").kendoGrid({
        ////////        dataSource: {
        ////////            data: nameList,
        ////////            //        type: "jsonp",
        ////////            //transport: {
        ////////            //            read: {
        ////////            //                url: readUrl,
        ////////            //        //    dataType: "jsonp"
        ////////            //    },
        ////////            //    update: {
        ////////            //                url: updateUrl,
        ////////            //        // dataType: "jsonp"
        ////////            //    },

        ////////            schema: {
        ////////                model: {
        ////////                    id: "LangID",
        ////////                    fields: {
        ////////                        LangID: { editable: false },
        ////////                        GalleryID: { editable: false },
        ////////                        LanguageName: { editable: false },
        ////////                        GalleryName: { editable: true },
        ////////                    }
        ////////                },
        ////////            },
        ////////        },
        ////////        batch: true,
        ////////        pageSize: 2,
        ////////        requestStart: function (e) {
        ////////            console.log("request started");
        ////////        },
        ////////        requestEnd: function (e) {
        ////////            console.log("request ended");
        ////////        },
        ////////        // },
        ////////        height: 100,
        ////////        groupable: false,
        ////////        sortable: false,
        ////////        editable: {
        ////////            mode: 'incell',
        ////////            update: true,
        ////////        },
        ////////        save: function (e) {
        ////////            //if (e.values.name !== "") {
        ////////            //    // the user changed the name field
        ////////            //    if (e.values.name !== e.model.name) {
        ////////            //        console.log("name is modified");
        ////////            //    }
        ////////            //} else {
        ////////            //    e.preventDefault();
        ////////            //    console.log("name cannot be empty");
        ////////            //}
        ////////        },
        ////////        //toolbar: ["create", "save", "cancel"],
        ////////        pageable: false,
        ////////        selectable: false,
        ////////        //    {
        ////////        //        refresh: true,
        ////////        //        pageSizes: true,
        ////////        //        buttonCount: 5
        ////////        //    },
        ////////        dataBinding: function (e) {
        ////////            console.log("dataBinding");
        ////////        },
        ////////        dataBound: function (e) {
        ////////            console.log("dataBound");

        ////////            var gridWrapper = e.sender.wrapper;
        ////////            //var gridDataTable = e.sender.table;
        ////////            //var gridDataArea = gridDataTable.closest(".k-grid-content");

        ////////            gridWrapper.addClass("no-scrollbar");//, gridDataTable[0].offsetHeight < gridDataArea[0].offsetHeight);
        ////////            $(".k-grid .k-grid-header").hide();
        ////////        },
        ////////        /*
        ////////                : { editable: false },
        ////////                    : { editable: false },
        ////////                    : { editable: false },
        ////////                    : { editable: true },
        ////////        */
        ////////        columns: [{
        ////////            field: "LangID",
        ////////            title: "LangID",
        ////////            width: 0,
        ////////            hidden: true,
        ////////        }, {
        ////////            field: "GalleryID",
        ////////            title: "GalleryID",
        ////////            width: 0,
        ////////            hidden: true,
        ////////        }, {
        ////////            field: "LanguageName",
        ////////            title: "",
        ////////            width: 150,
        ////////            hidden: false,
        ////////            editable: false,
        ////////        }, {
        ////////            field: "GalleryName",
        ////////            title: "Gallery Name",
        ////////            //template: function (data) {
        ////////            //    return "<img src='" + data.Url + "' style='width:100px'>"
        ////////            //},
        ////////        },
        ////////        //{ command: "destroy" },
        ////////        ]
        ////////    });
        ////////});
    </script>
}


@*<style>
        .k-input, .k-textbox {
            max-width: 100%;
        }

        .no-scrollbar .k-grid-header {
            padding: 0 !important;
        }

        .no-scrollbar .k-grid-content {
            overflow-y: visible;
        }
        .k-grid .k-header {
       display: none;
    }
    </style>*@